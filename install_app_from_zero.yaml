# versions.yaml example:
# postgresql_version: 11
# python_version: 3.6.5
# web_bb_version: 2020.55
# pip_version: 20.0.2
---
-  hosts: all
   vars_files:
     - "./environment.yaml"
     - "./versions.yaml"
   tasks:
     - block:
       - name: "epel-release"
         yum:
           state: present
           name: epel-release
           update_cache: yes

       - name: "install nano, netstat, htop, iostat, telnet, zabbix-agent, chrony, ncdu, libselinux-python, lsof, open-vm-tools, lsof, tmux, strace"
         yum:
           state: present
           update_cache: yes
           name:           
             - nano
             - telnet
             - net-tools
             - htop
             - iotop
             - zabbix30-agent
             - chrony
             - ncdu
             - libselinux-python
             - open-vm-tools
             - lsof
             - tmux
             - strace
       environment: "{{ env_vars }}"
       become: yes
       become_user: root
       when: ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7'

     - block:
       - name: "DIsable SeLinux in config file"
         lineinfile:
           path: /etc/selinux/config
           regexp: '^SELINUX='
           line: SELINUX=disabled
       - name: "Disable Selinux (runtime)"
         selinux:
           state: disabled
       when: ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7'
       become: yes
       become_user: root

     - block:
       - name: "Add postgres database repo on RHEL"
         yum:
           state: present
           name: "https://download.postgresql.org/pub/repos/yum/reporpms/EL-{{ ansible_distribution_major_version }}-x86_64/pgdg-redhat-repo-latest.noarch.rpm"

       - name: "Install postgresql database and utils"
         yum:
           state: present
           name:
             - "postgresql{{ postgresql_version }}-server"
             - "postgresql{{ postgresql_version }}"
             - pg_activity
       environment: "{{ env_vars }}"
       become: yes
       become_user: root
       when: inventory_hostname in groups['database'] and ansible_os_family == 'RedHat'

     - block:
       - name: "Install requimenets for install python and pyenv"
         yum:
           name:
             - git
             - gcc
             - zlib-devel
             - bzip2
             - bzip2-devel
             - readline-devel
             - sqlite
             - sqlite-devel
             - openssl-devel
             - tk-devel
             - libffi-devel
             - python-virtualenv
             - postgresql-devel
             - libxslt-devel
             - libxml2-devel
             - libtiff-devel
             - libjpeg-devel
             - libzip-devel
             - freetype-devel
             - lcms2-devel
             - libwebp-devel
             - tcl-devel
             - gcc-c++ 
           state: present    

       - name: "Install pyenv (clone from repo)"
         git:
           repo: https://github.com/pyenv/pyenv.git
           dest: /opt/pyenv/

       - name: "Modify .bash_profile for pyenv"
         blockinfile:
           path: /root/.bash_profile
           state: present
           block: |
             export PYENV_ROOT=/opt/pyenv/
             export PATH="$PYENV_ROOT/bin:$PATH"

       - name: "Install specific Python version"
         shell: "/opt/pyenv/bin/pyenv install {{ python_version }} -s"
       environment: 
         - "{{ env_vars }}"
         - PYENV_ROOT: "/opt/pyenv/"
       become: yes
       become_user: root
       when: (inventory_hostname in groups['web'] or inventory_hostname in groups['async']) and ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7'

     - name: "Download web_bb packages to local machine"
       get_url:
         dest: /tmp/
         force_basic_auth: yes
         url: "{{ item }}"
         url_password: XXX 
         url_username: bars
       loop:
         - "http://salt.secret_site.ru/web_bb_builds/web-bb-{{ web_bb_version }}-requirements.tar.gz"
         - "http://salt.secret_site.ru/web_bb_builds/web-bb-{{ web_bb_version }}.tar.gz"
       delegate_to: 127.0.0.1
       run_once: yes

     - block:
       - name: "Create www-data user"
         user:
           name: www-data
           uid: 1111
       - name: "chnage permission for /var/www/ and create it"
         file:
           group: www-data
           mode: 0755
           owner: www-data
           path: "/var/www/"
           recurse: yes
           state: directory
       become: yes
       become_user: root
       when: (inventory_hostname in groups['web'] or inventory_hostname in groups['async'] or inventory_hostname in groups['balancer']) and ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7'

     - block:
       - name: "Create Virtualenv"
         shell: "virtualenv --prompt='(prod_chelyab_web_bb)' -p /opt/pyenv/versions/{{ python_version }}/bin/python /var/www/venv/web_bb/"
         environment: "{{ env_vars }}"
         when: (inventory_hostname in groups['web'] or inventory_hostname in groups['async']) and ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7'
        
       - name: "Unpack tar.gz with web_bb"
         unarchive:
           copy: yes
           dest: "/tmp/web-bb-{{ web_bb_version }}/"
           src: "{{ item }}"
         loop:
           - "/tmp/web-bb-{{ web_bb_version }}-requirements.tar.gz"
           - "/tmp/web-bb-{{ web_bb_version }}.tar.gz"

       - name: "Install numpy from local path"
         pip:
           extra_args: "--no-index --find-link=/tmp/web-bb-{{ web_bb_version }}/"
           virtualenv: /var/www/venv/web_bb/
           name: numpy

       - name: "Install cython from pypi repo"
         pip:
           virtualenv: /var/www/venv/web_bb/
           name: cython

       - name: "Install web_bb_application"
         pip:
           extra_args: "--no-index --find-link=/tmp/web-bb-{{ web_bb_version }}/"
           virtualenv: /var/www/venv/web_bb/
           name:  "/tmp/web-bb-{{ web_bb_version }}/web_bb_app-{{ web_bb_version }}.tar.gz"
       become: yes
       become_user: www-data
       environment: "{{ env_vars }}"
       when: (inventory_hostname in groups['web'] or inventory_hostname in groups['async'])

     - name: "Clone repo with configs"
       git:
         repo: ssh://git@secret_site:7999/budg/production-configurations.git
         dest: /tmp/production-configurations/
         key_file: ~/.ssh/id_rsa_repo_stash
         force: yes
       delegate_to: 127.0.0.1
       run_once: yes
       tags: go

     - block:
       - name: 'Create necessary paths'
         file:
           name: "{{ item }}"
           state: directory
           group: www-data
           owner: www-data
           recurse: yes
         loop:
           - /var/www/web_bb_config/
           - /var/www/log/
           - /var/log/web_bb/
           - /var/run/web_bb/
           - /var/www/html/
         when: inventory_hostname in groups['web'] or inventory_hostname in groups['async']

       - name: 'Create necessary paths in nfs-share'
         file:
           name: "{{ item }}"
           state: directory
           group: www-data
           owner: www-data
           recurse: yes
         loop:
           - /var/www/web_bb_config/share/downloads/
           - /var/www/web_bb_config/share/media/
         when: inventory_hostname in groups['web'][0]

       - name: "Copy gunicorn config to servers"
         template:
           dest: /var/www/web_bb_config/gunicorn.conf.py
           mode: 0644
           owner: www-data
           group: www-data
           src: /tmp/production-configurations/{{ name_in_repo_config }}//files/app_configs/gunicorn_web.py
         when: inventory_hostname in groups['web']

       - name: "Copy app configs to servers to web-servers"
         copy:
           src: /tmp/production-configurations/{{ name_in_repo_config }}//files/app_configs/project_web.conf
           dest: /var/www/web_bb_config/project.conf
           group: www-data
           owner: www-data
         when: inventory_hostname in groups['web']

       - name: "Copy app configs to servers to async-servers"
         copy:
           src: /tmp/production-configurations/{{ name_in_repo_config }}//files/app_configs/project_async.conf
           dest: /var/www/web_bb_config/project.conf
           group: www-data
           owner: www-data
         when: inventory_hostname in groups['async']

       - name: "Copy lic"
         copy:
           src: /tmp/production-configurations/{{ name_in_repo_config }}//files/app_configs/lic_key.xml
           dest: /var/www/web_bb_config/lic_key.xml
           group: www-data
           owner: www-data
         when: inventory_hostname in groups['web'] or inventory_hostname in groups['async']
       tags: go
       become: yes
       become_user: root


     - name: "Make collectstatic command"
       django_manage:
         app_path: "/var/www/venv/web_bb/lib/python{{ python_version[0:3] }}/site-packages/web_bb_app/"
         command: collectstatic
         virtualenv: /var/www/venv/web_bb/
       environment: "{{ env_vars }}"
       become: yes
       become_user: www-data
       when: inventory_hostname in groups['web'][0]
